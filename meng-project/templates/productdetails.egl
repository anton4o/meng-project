[%
if(`Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.one(t | returnAnnotation(t.name, 11).equals("MasterPage"))) {
	 var masterViewContainer = `Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.selectOne(t | returnAnnotation(t.name, 11).equals("MasterPage"));
	loadTemplate(masterViewContainer.name.substring(13).toLowerCase() + ".egl");
} else {
	noTemplate();
}

var itemIFMLModel = Item!IFMLModel.all.first;
var itemFlowModel = itemIFMLModel.interactionFlowModel;
var itemFlowModelElements = itemFlowModel.interactionFlowModelElements;

var landmarks : Set;
 	for (parentVC in `Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.select(e | e.isKindOf(ViewContainer))) { 				
 				if (parentVC.isLandmark == true) {
 					landmarks.add(parentVC);
 				}
 			for (childVC in parentVC.viewElements.select(m | m.isKindOf(ViewContainer))) {			
 					if (childVC.isLandmark == true) {
 				landmarks.add(childVC);
 	 			}
 		}
 		}

var addToCartAction; 
var controls = getDefaultVC().viewElements.flatten().selectOne(m | m.isTypeOf(Form));
var detailsComponent = getDefaultVC().viewElements.flatten().selectOne(m | m.isTypeOf(Details));
%]

<div class="container">

[% if(getDefaultVC().size == 1) { %]
<div class="panel panel-default">
  <div class="panel-heading"><h3 class="panel-title">[%=getDefaultVC().flatten().name.first()%]</h3></div>
 
  <div class="panel-body">
  	<div class="container">
    	<div class = "row">
    		[% //check for Details VC here
    		if (detailsComponent.isDefined()) { 	
    		var attributes = detailsComponent.viewComponentParts.subViewComponentParts.flatten();
    		%]
    		[% if(attributes.exists(a | a.isTypeOf(VisualizationAttribute) and a.name.equals("img"))) { %]    		
    		<div class="col-xs-6 col-md-4"><div class="thumbnail"><img style="height: auto;" src="#" id="pic"></div></div>
    		[% } %] 
    		<div class="col-xs-6 col-md-4" id="second">
    		[% if(attributes.exists(a | a.isTypeOf(VisualizationAttribute) and a.name.equals("title"))) { %] <h3 id="pname"></h3>[% } %]
    		[% if(attributes.exists(a | a.isTypeOf(VisualizationAttribute) and a.name.equals("price"))) { %] <h4 id="pprice"></h4>[% } %]
    			<br>
    			<br>
    		[% if(attributes.exists(a | a.isTypeOf(VisualizationAttribute) and a.name.equals("description"))) { %] <p id="pdescr"></p>[% } %]
    		</div>
		[% } /*end of Details VC*/ %]
    	
    	[% //Check for Form VC here
    	if (controls.isDefined()) { %]
    		<div class="col-xs-6 col-md-2" id="third">
    			<div class="form-group">
    				<div class="btn-group">				
    				[% for (field in controls.viewComponentParts.flatten()) { 
    				if(field.isTypeOf(SelectionField)) { %]
    				<div class="dropdown">
  					<button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">[%=field.name%]<span class="caret"></span></button>
  						<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
    					<li role="presentation"><a role="menuitem" tabindex="-1" href="#" id="color1"></a></li>
   						<li role="presentation"><a role="menuitem" tabindex="-1" href="#" id="color2"></a></li>
    					<li role="presentation"><a role="menuitem" tabindex="-1" href="#" id="color3"></a></li></ul>
					</div>
					<br>
					[% } %]
			
    				[% if(field.isTypeOf(SimpleField)) { %]
					<input type="number" class="form-control" placeholder="[%=field.name%]" id="qty" min="1" max="100" value="1">
					<br> [% } %]
					[% } %]					
					</div>
					
					[% for (event in controls.viewElementEvents.select(e | e.isTypeOf(OnSubmitEvent))) { %]
					[% //it is assumed all buttons will have some action associated with, before being able to capture the outgoing flow of that action
					var target = event.outInteractionFlows.select(nav | nav.targetInteractionFlowElement.isDefined()).targetInteractionFlowElement.actionEvents.outInteractionFlows.targetInteractionFlowElement.flatten().name.first; %]
					[% if(itemFlowModelElements.exists(t | t.isTypeOf(ThrowingEvent) and t.name.equals("AddNotification"))) { 
					var throwingEvent = "new=1";%]
					<a class="btn btn-warning" href="[%=removeAnnotation(target)%].html?[%=throwingEvent%]" role="button" id="cartButton" style="margin-bottom: 15px;">[%=event.name%]</a>
					[% } %]
					<br>
					[% } %]
					[% if(itemFlowModelElements.exists(a | a.isTypeOf(IFMLAction) and a.name.equals("Add to cart"))) {
						addToCartAction = true;
					}%]
					</div>
    		</div>
    	[% } //End of Form VC %]

    	</div> <!-- row -->
    </div> <!-- container -->
  </div> <!-- panel-body -->
</div> <!-- panel -->
[% } /*panel if*/ %]

</div>

[% for (landmark in landmarks) {
	if (landmark.exists(f | returnAnnotation(f.name, 5).equals("Area") and removeAnnotation(f.name).contains("Footer"))) { %]
	<br>
	<nav class="navbar navbar-default" class="footer"><div class="container"><center>Copyright 2015, University of York or its affiliates</center></div></nav>
[%	}
}
 %]

</body>
</html>
<script type="text/javascript" src="resources/item.js" id="productDetailsJS" data-AddToCartAction="[%=addToCartAction%]" data-selectBinding="[%=controls.viewComponentParts.flatten().select(a | a.isTypeOf(SelectionField)).first.subViewComponentParts.selectOne(e | e.isTypeOf(DataBinding)).name.toLowerCase()%]" data-detailsBinding="[%=detailsComponent.viewComponentParts.selectOne(e | e.isTypeOf(DataBinding)).name.toLowerCase()%]"></script>  
<script>document.title = "[%=itemIFMLModel.name%]";</script> 

[%	
	operation returnActions() : Collection(IFMLAction) {
	return Item!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.select(a | a.isKindOf(IFMLAction));
	}
	
	operation returnViewContainers() : Collection(ViewContainer) {
	return Item!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.select(a | a.isKindOf(ViewContainer));
	}
	
	operation getDefaultVC() {
	return returnViewContainers().select(mainVC | mainVC.isDefault==true);
	}
	
	operation removeAnnotation(string : String) {
	return string.substring(6).replace(" ", "");
}

operation returnAnnotation(string2 : String, endIndex : Integer) {
	return string2.substring(1,endIndex);
}

operation loadTemplate(templateName : String) {
	var template : Template = TemplateFactory.load(templateName);
	var templateCode = template.process();
	out.print(templateCode);
}

operation noTemplate() {
	out.print("<!DOCTYPE html><head><title></title><link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css'><link rel='stylesheet' href='/resources/styling.css'><script src='https://code.jquery.com/jquery.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.js'></script><script type='text/javascript' src='resources/template.js'></script></head><body onload='read_json();'>");
}
%]