[%

if(`Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.one(t | returnAnnotation(t.name, 11).equals("MasterPage"))) {
	 var masterViewContainer = `Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.selectOne(t | returnAnnotation(t.name, 11).equals("MasterPage"));
	loadTemplate(masterViewContainer.name.substring(13).toLowerCase() + ".egl");
} else {
	noTemplate();
}

var homeIFMLModel = Home!IFMLModel.all.first;
var homeFlowModel = homeIFMLModel.interactionFlowModel;
var homeFlowModelElements = homeFlowModel.interactionFLowModelElements;
var homeViewElements = homeFlowModelElements.viewElements;

var landmarks : Set;
 	for (parentVC in `Template`!IFMLModel.all.first.interactionFlowModel.interactionFLowModelElements.select(e | e.isKindOf(ViewContainer))) { 				
 				if (parentVC.isLandmark == true) {
 					landmarks.add(parentVC);
 				}
 			for (childVC in parentVC.viewElements.select(m | m.isKindOf(ViewContainer))) {			
 					if (childVC.isLandmark == true) {
 				landmarks.add(childVC);
 	 			}
 		}
 		}
 		
var featured = null;

var lists = homeViewElements.flatten().select(p | p.isTypeOf(Home!`List`));
var href = lists.first().viewElementEvents.outInteractionFlows.targetInteractionFlowElement.flatten().first.name; 

var numOfLists = lists.size();
		
%]

<div class="container">
[% for (component in homeViewElements.flatten()) {		
		if(component.isTypeOf(Details) and component.name.contains("Featured")) { 
		featured = component;  %]
			<div class='jumbotron'>
			[% if(component.viewComponentParts.subViewComponentParts.flatten().name.contains("name")) { %]
			<h1 id="campaignName">Featured campaign: </h1>
			[% } %]
			[% if(component.viewComponentParts.subViewComponentParts.flatten().name.contains("description")) { %]
			<p id="campaignDescription"></p>
			[% } %]
			[% 			
			if(not component.viewElementEvents.isEmpty()) { %]
			<a class="btn btn-primary btn-lg" href="#" role="button">[%=component.viewElementEvents.first().name%]</a>
			[% } %]
			</div>
	[% }} %]

[%
//If there are any lists in the model:
if(homeViewElements.flatten().exists(el | el.isTypeOf(Home!`List`))) { 
//list identifier
var b : Integer = 0;
//perform this loop for every list in the model
for(list in homeViewElements.flatten().select(p | p.isTypeOf(Home!`List`))) { %]
		<h2>[%=list.name%]</h2>
		<div class = "row">
[% 		//get the vizualization attributes for that particular list
		var vizAttributes = list.viewComponentParts.subViewComponentParts.flatten().select(h | h.isTypeOf(VisualizationAttribute)).name; 
		var i : Integer = 0;
		while(i<6) {
		out.print("<div class='col-xs-6 col-md-2'><a href='#' class='thumbnail' id='link" + b + i + "'>");
		if (vizAttributes.includes("image")) {
		out.print("<img src='#' alt='test' id='img" + b + i + "'>");
			}
		 if(vizAttributes.includes("title")) {
		out.print("<p id='title" + b + i + "'></p>");
			} 
		 if(vizAttributes.includes("price")) {
		out.print("<p id='price" + b + i + "'></p>");
		 }
		out.print("</a></div>");
			i = i + 1;
	}
	out.print("</div>");
			b = b + 1;
 	} 
 }%]	

</div>

[% for (landmark in landmarks) {
	if (landmark.exists(f | returnAnnotation(f.name, 5).equals("Area") and removeAnnotation(f.name).contains("Footer"))) { %]
	<br>
	<nav class="navbar navbar-default footerz" ><div class="container">Copyright 2015, University of York or its affiliates</div></nav>
[%	}
}
 %]
 
<script id="homeJS" data-campaignBinding="[%=featured.viewComponentParts.selectOne(e | e.isTypeOf(DataBinding)).name.toLowerCase()%]" data-listBinding="[%=lists.viewComponentParts.flatten().selectOne(er | er.isTypeOf(DataBinding)).name.toLowerCase()%]" data-listHref="[%=removeAnnotation(href).toLowerCase()%]" data-numOfLists="[%=numOfLists%]" type="text/javascript" src="resources/home.js"></script>
<script>document.title = "[%=homeIFMLModel.name%]";</script> 
 
</body>
</html>

[% 
operation returnAnnotation(string2 : String, endIndex : Integer) {
	return string2.substring(1,endIndex);
}

operation removeAnnotation(string : String) {
	return string.substring(6).replace(" ", "");
}

operation loadTemplate(templateName : String) {
	var template : Template = TemplateFactory.load(templateName);
	var templateCode = template.process();
	out.print(templateCode);
}

operation noTemplate() {
	out.print("<!DOCTYPE html><head><title></title><link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css'><link rel='stylesheet' href='/resources/styling.css'><script src='https://code.jquery.com/jquery.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.js'></script><script type='text/javascript' src='resources/template.js'></script></head><body onload='read_json();'>");
}
%]                